security:
    encoders:
        App\Entity\User:
            algorithm: auto
    role_hierarchy:    
        ROLE_ADMIN_: ROLE_CAISSIER
        ROLE_ADMIN_SYS: [ROLE_ADMIN,ROLE_CAISSIER,ROLE_ALLOWED_TO_SWITCH]


    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        entity_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
       
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        
        login:
            pattern:  ^/login
            stateless: true
            anonymous: true
            json_login:
                check_path: /login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        #main:
            #pattern: ^/
            #user_checker: App\security\UserChecker
            #http_basic: ~
            #provider: entity_provider

        register:
            pattern:  ^/register
            stateless: true
            anonymous: true
      



        # revoir la documentation (nouvelle methode de blocage)    user_checker: App/security/UserCkecker
            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
         - { path: ^/api/login, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/api/register, roles: IS_AUTHENTICATED_ANONYMOUSLY }
         - { path: ^/api, roles: IS_AUTHENTICATED_FULLY  }
